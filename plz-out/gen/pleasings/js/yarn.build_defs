def yarn_module(name, version, package_name=None, resolved_by:str='', out=None, hashes=None, test_only=False, patches=None,
                 visibility=None, deps=[], _tag=''):
    """Install a third-party library from the Yarn registry into a local mirror that yarn_script can use.

    The typical workflow for this is to use Yarn to set up your package.json and yarn.lock, then feed it through
    //js/yarn_deps to generate the appropriate BUILD rules. The yarn files may be checked in and used to facilitate
    watchers and other niceties from the yarn ecosystem.

    See //js/yarn_deps/generate_third_party.sh for an example usage.

    Args:
      name (str): Name of the rule.
      version (str): Version of the package to install.
      package_name (str): The name of the node package. Defaults to name.
      resolved_by (str): The URL that this dependency is resolved by. Optional.
      out (str): Output name for this package. Defaults to name.
      hashes (list): List of hashes that outputs must match.
      test_only (bool): If True, can only be depended on by test rules.
      patches (list): List of patch files to apply to the output library.
      visibility (list): Visibility declaration for this rule.
      deps (list): Any other dependencies of the rule.
    """
    package_name = package_name or name
    url = resolved_by if resolved_by else 'https://registry.yarnpkg.com/%s/-/%s-%s.tgz' % (package_name, package_name, version)
    cmd = 'echo "Fetching %s..." && mkdir target && curl -fsSL %s | tar -xz --no-same-owner --no-same-permissions -C target && mv target/* $OUT' % (url, url)
    if patches:
        cmd += ' && for SRC in $SRCS; do patch -p0 -l -i $SRC; done'

    download = remote_file(
        name = f'_{name}#download',
        url = url,
        out = out if out else f'{name}.tgz',
        hashes = hashes,
        test_only = test_only,
        visibility = visibility,
        labels = ['yarn:%s@%s' % (package_name, version)],
    )

    return filegroup(
        srcs = [download],
        name = name,
        exported_deps = deps,
        needs_transitive_deps = True,
        visibility = visibility,
    )

def _yarn_install(third_party_location, production, environment_vars):
    cmd = ["cd $(dirname $SRCS_PACKAGE_JSON)"]

    for var in environment_vars.keys():
        value = environment_vars[var]
        cmd.append(f"export {var}={value}")

    return cmd + [
        f"echo yarn-offline-mirror \"$TMP_DIR/{third_party_location}\" > .yarnrc",
        "$TOOLS_YARN --frozen-lockfile --offline install --production" if production else "$TOOLS_YARN --frozen-lockfile --offline install",
    ]

def yarn_script(name:str, script_name:str="build", args:str="", outs=[], package_json:str="package.json",
                yarn_lock:str="yarn.lock", srcs:list, deps:list=[], test_only:bool=False, visibility:list=None,
                third_party_location:str=CONFIG.YARN_OFFLINE_MIRROR, binary:bool=False, hashes:list=None,
                environment_vars:dict={}, workspace:str=CONFIG.YARN_WORKSPACE, production_only:bool=False):
    """
        Runs a script within a node module handling the yarn install. This can be used to create bundles with tools
        like webpack.

        Args:
          name (str): Name of the rule.
          script_name (str): The script to run. If left blank, only the modules will be installed.
          args (str): Any additional args to pass to yarn
          outs (str): A list of outputs to save from this rule
          package_json (str): The module's package.json file
          yarn_lock (str): The module's yarn.lock file
          srcs (list): Any sources to pass to this rule.
          deps (str): Any dependencies of this rule.
          test_only (bool): If True, can only be depended on by test rules.
          visibility (list): Visibility declaration for this rule.
          third_party_location (str): The location of the third party offline mirror rules.
          binary (bool): If the outputs of this rule are binary. Default false.
          hashes (list): List of hashes that outputs must match.
          environment_vars (dict): Map of environment variables to values. Some yarn packages may require these.
          workspace (str): The yarn workspace rule to use. If this is not set, the yarn.lock file is expected to exist
                           in the current node module.
          production_only (bool): Whether to install only the production dependencies i.e. not the dev dependencies
        """
    cmd = _yarn_install(third_party_location, production_only, environment_vars)

    if script_name:
        cmd += [f"$TOOLS_YARN --offline run {script_name} {args}"]

    for out in outs:
        cmd+=[f"mv {out} $TMP_DIR/{out}"]

    if workspace:
        deps += [workspace]
    else:
        srcs += [yarn_lock]

    return genrule(
        name = name,
        srcs = {
            'main': srcs,
            'package_json': [package_json]
        },
        cmd  = cmd,
        outs = outs,
        deps = deps,
        needs_transitive_deps = True,
        building_description = "Building...",
        tools = {"yarn": [CONFIG.YARN_TOOL]},
        binary = binary,
        visibility = visibility,
        test_only = test_only,
        hashes = hashes,
    )

def yarn_workspace(name:str, package_json:str="package.json", srcs:list=[], deps:list=[], test_only=False, visibility:list=None,
              hashes=None):
    """
        Defines a node module which can be used as a library and depended on by a yarn_script rule.

        Args:
          name (str): Name of the rule.
          package_json (str): The package.json file for this module. Defaults to package.json.
          srcs (str): Any sources to pass to this rule.
          deps (str): Any dependencies of this rule.
          test_only (bool): If True, can only be depended on by test rules.
          visibility (list): Visibility declaration for this rule.
          hashes (list): List of hashes that outputs must match.
    """
    return filegroup(
        name = name,
        srcs = srcs + [package_json],
        exported_deps = deps,
        test_only = test_only,
        visibility = visibility,
        hashes = hashes,
    )

def yarn_workspace_root(name:str, package_json:str="package.json", yarn_lock="yarn.lock", visibility:list=["PUBLIC"],
                   hashes:list=None):
    """
        Defined a yarn workspace that can be used to enable multiple yarn projects to exist in the same repository.

        Args:
          name (str): Name of the rule.
          package_json (str): The package.json file for this module. Defaults to package.json.
          yarn_lock (str): The yarn lock file. Defaults to yarn.lock.
          visibility (list): Visibility declaration for this rule.
          hashes (list): List of hashes that outputs must match.
    """
    return filegroup(
        name = name,
        srcs = [package_json, yarn_lock],
        visibility = visibility,
        hashes = hashes,
    )

CONFIG.setdefault('NODE_TOOL', 'node')
# TODO(jpoole): it should be possible to create a yarn build rule instead of requiring it on the path
CONFIG.setdefault('YARN_TOOL', 'yarn')
CONFIG.setdefault('JQ_TOOL', 'jq')
CONFIG.setdefault('YARN_OFFLINE_MIRROR', 'third_party/js')