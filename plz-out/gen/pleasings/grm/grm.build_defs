"""Build rules for Thrax grammars (http://www.openfst.org/twiki/bin/view/GRM/Thrax).

You will of course need to subinclude() this file into each package that builds grammars.
The grm_library rule compiles a .grm into a .far, and there are a couple of convenience
rules to perform other manipulations on them.

If you want to use grm_test (because of course you are testing your grammars) then you
need to build the C++ binary for it that runs the test. This is easy to do by adding a
package (idiomatically //third_party/grm/BUILD) in which you again subinclude() these
rules and run grm_init(). That sets up a cc_binary target for the test main.
If you want to put it somewhere else, that's fine, but you'll have to change it in the
config (via `package(grm_test_main = '//my/package:test_main')`) or pass test_main to
each grm_test rule.

For any of this to work you will need to have libfst and thraxcompiler installed.
"""
subinclude('//remote')


def grm_library(name:str, src:str, deps:list=[], data:list=[], visibility:list=None, timeout:int=0):
    """Build rule for compiling a Thrax grammar.

    Args:
      name: The name of the build rule.
      src: Input .grm file.
      deps: Dependencies.
      data: Static data files required for this rule.
      visibility: Rule visibility.
      timeout: Timeout (in seconds) for building this rule.
    """
    thraxcompiler = CONFIG.get('THRAXCOMPILER', 'thraxcompiler')

    # thraxcompiler needs access to both the sources and compiled artifacts
    # of its dependencies. We could output them from the .far rule as well
    # but that makes it awkward to use in other rules. Better to encapsulate
    # it here since it's something of an implementation detail, although it
    # does complicate these rules somewhat.
    filegroup(
        name = '_%s#src' % name,
        srcs = [src],
        visibility = visibility,
    )
    build_rule(
        name = '_%s#far' % name,
        srcs = {
            'src': [src],
            'data': data,
        },
        deps = deps + [':_%s#src' % name],
        cmd = '$TOOL --input_grammar=$SRCS_SRC --output_far=$OUT',
        outs = [name + '.far'],
        visibility = visibility,
        build_timeout = timeout,
        requires = ['grm', 'far'],
        needs_transitive_deps = True,
        tools = [thraxcompiler],
    )
    filegroup(
        name = name,
        srcs = [':_%s#far' % name],
        deps = [':_%s#src' % name],
        provides = {
            'grm': ':_%s#src' % name,
            'far': ':_%s#far' % name,
        },
        visibility = visibility,
    )


def grm_test(name:str, ref:str, far:str, exclude:list=None, ignore_case:bool=False,
             test_main:str=None, deps:list=None, visibility:list=None, labels:list=None):
    """Build rule for compiling a test on a Thrax grammar.

    Args:
      name: The name of the test rule.
      ref: Reference file for the test.
      far: Compiled .far file to test (typically a grm_library target).
      exclude: File containing test lines to ignore.
      ignore_case: Ignore case for the input facet of the rule.
      test_main: Target that defines the test binary (defaults to config setting,
                 which itself defaults to //third_party/grm:test_main).
      deps: Dependencies.
      visibility: Rule visibility.
    """
    test_main = test_main or CONFIG.get('GRM_TEST_MAIN')
    if not test_main:
        raise ParseError('You must set grm-test-main in .plzconfig to use grm_test rules')

    cmd = ' '.join([
        '$(location %s)' % test_main,
        '--far=$(location %s)' % far,
        '--exclude=$(location %s)' % exclude if exclude else '',
        '-o=test.results',
        '--ignore_case' if ignore_case else '',
        '< $(location %s)' % ref,
    ])
    data = [ref, far, test_main]
    if exclude:
        data.append(exclude)
    gentest(
        name = name,
        data = data,
        deps = deps,
        test_cmd = cmd,
        visibility = visibility,
        srcs = data,
        outs = [name],
        cmd = 'echo \'%s\' > $OUT' % cmd,
        labels = labels,
    )


def extract_fst(name:str, src:str, rule:str, out:str=None,
                deps:list=None, visibility:list=None, farextract:str=None):
    """Build rule to extract a single FST from a .far.

    Args:
      name: Name of the build rule.
      src: Source .far to extract from.
      rule: Name of rule to extract from the .far.
      out: Name of output file to create. Defaults to rule + '.fst'.
      deps: Dependent build rules.
      visibility: Rule visibility.
      farextract: Tool to use for farextract. Defaults to whatever's set in the config,
                  which itself defaults to 'farextract'.
    """
    farextract = farextract or CONFIG.get('FAREXTRACT', 'farextract')
    out = out or (rule + '.fst')
    genrule(
        name = name,
        deps = deps,
        srcs = [src],
        cmd = '$TOOL --keys=%s $SRC && mv %s ${OUT}' % (rule, rule),
        out = out,
        visibility=visibility,
        requires = ['far'],
        tools = [farextract],
    )


def filter_far(name:str, src:str, rules:list, out:str=None, deps:list=None, visibility:list=None):
    """Build rule to cut down a .far to just the given rules.

    Args:
      name: Name of the build rule.
      src: Source .far to extract from.
      rules: Names of rules to retain.
      out: Name of output file to create.
      deps: Dependent build rules.
      visibility: Rule visibility.
    """
    farextract = farextract or CONFIG.get('FAREXTRACT', 'farextract')
    genrule(
        name = name,
        srcs = [src],
        outs = [out or name + '.far'],
        cmd = '$TOOL --keys=%s $SRC && farcreate %s $OUT' % (','.join(rules), ' '.join(rules)),
        deps = deps,
        visibility=visibility,
        requires = ['far'],
        tools = [farextract],
    )


def grm_init():
    """Call this once in the package that will contain test_main (typically third_party/grm).

    It will set up rules to download the source code for the test binary
    and compile it. You'll of course need to have libfst, libfstfar and libthrax
    installed for it all to work.

    You should also set the following appropriately in your .plzconfig so other uses of
    grm_library can find it:
    [buildconfig]
    grm-test-main = //third_party/grm:test_main
    """
    # TODO(peterebden): This should really be modernised to suggest using it as a subrepo.
    if 'GRM_TEST_MAIN' not in CONFIG:
        raise ParseError('grm-test-main not set in .plzconfig')

    github_file(
        name = 'fetch_test_main',
        repo = 'thought-machine/pleasings',
        file = 'grm/grm_test_main.cc',
    )
    cc_binary(
        name = 'test_main',
        srcs = [':fetch_test_main'],
        linker_flags = [
            # libfst / libfstfar often end up in a subdirectory, depending on exactly how you
            # build and install them. We try to cover all bases here.
            '-L/usr/local/lib/fst',
            '-L/usr/lib/fst',
            '-lthrax -lfst -lfstfar -ldl',
        ],
        visibility = ['PUBLIC'],
    )
