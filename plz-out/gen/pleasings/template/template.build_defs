def template_files(name:str, srcs:list, subs, outs:list=None, visibility:list=None, labels:list=None):
    """Defines a rule to template source files replacing build labels with the content of the file generated by
    a its build label (if subs is a list) or another build label (if subs is a dict).


    Args:
        name (str): Name of the build rule.
        srcs (list): Files which will be used as templates.
        subs (list | dict): If list the name of the build target will be replced with the value of its output.
                            If dict the string in the key will be replaced with the value of the key's output.
                            eg. say that //build/target:1 outputs a file with text 'i am target 1'
                            ["//build/target:1"] will replace '//build/target:1' with 'i am target 1'.
                            {"//build/target:2", "//build/target:1"} will replace '//build/target:2' 
                            with 'i am target 1'.
        outs (list): List of files that the build generates.
        visibility (list): Visibility declaration for this rule.
        labels: Labels to tag this rule with.
    """
    if isinstance(subs, dict):
        replacement_targets = [canonicalise(target) for _, target in subs.items()]
        searches = _search_escaped(subs.keys())
    elif isinstance(subs, list):
        replacement_targets = [canonicalise(target) for target in subs]
        searches = _search_escaped(replacement_targets) # in this case the search string is same as target

    replacements = _replacement_escaped(replacement_targets)

    replace_in_single_quotes = ' '.join([
        _sed_for_single_quotes(search, replacement) for search, replacement in zip(searches, replacements)
    ])

    replace_break_at_end = ' '.join([
        _sed_for_break(search, replacement) for search, replacement in zip(searches, replacements)
    ])
    replacement_command = f'sed {replace_in_single_quotes} | sed {replace_break_at_end}'

    def cleaned_src(src):
        return src.replace('/', '_').replace(':', '_')

    outs = outs or ['templated_' + cleaned_src(src) for src in srcs]

    # make substitutions
    rules = [build_rule(
                name=name,
                tag=cleaned_src(src).replace('.', '_'),
                srcs=[src],
                outs=[out],
                cmd=f"$TOOLS $SRCS | {replacement_command} > $OUT",
                tools=['cat'],
                deps=replacement_targets,
            ) for src, out in zip(srcs, outs)]

    return filegroup(
        name=name,
        srcs=rules,
        visibility=visibility,
        labels=labels,
    )

def _replacement_escaped(replacements):
    return [f'$(cat $(location {r})' + r"| sed -e 's|[|\/&]|\\&|g ')" for r in replacements]

def _search_escaped(searches):
    return searches # haven't found the need to escape the search yet

def _sed_for_single_quotes(search, replace):
    return f'-e "s|\'{search}\'|{replace}|g"'

def _sed_for_break(search, replace):
    return f'-e "s|{search}\\b|{replace}|g"'

def template_value(name:str, cmd:str, visibility:list=None, test_only:bool=False):
    return build_rule(
        name = f'{name}_value',
        cmd = f'echo -n $({cmd}) > $OUT',
        outs = [f'{name}_value'],
        visibility = visibility,
        test_only = test_only,
        )
